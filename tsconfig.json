{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает , что теперь вовсе нельзя использовать any
    // Это лишь означает , что в подобных ситуациях разработчик должен явано указывать тип any
    "noImplicitAny": true,
    "paths": {
      "@/*" : ["./src/*"]
    },
    "module": "ESNext",
    // в какую спецификацию компилируем : для поддержки большинства браузеров
    "target": "es5",
    "jsx": "react-jsx",
    // строгий режим компилятора
    "strict": true,
    // Компилятор будет обрабатывать не тольско TS файлы , но и JS файлы
    "allowJs": true,
    // для абсолютного импорта
    "baseUrl": ".",
    "moduleResolution": "node",
    // esModuleInterop позволяет работать с пакетами , которые используют
    // common js как с обычными пакетами с помощью import (require () module.exports) = common js
    // import Moment from 'moment'
    // без флага esModuleInterop результат undefined
    // console.log(Moment)
    // с флагом результат [object Object]
    // console.log(Moment)
    "esModuleInterop": true,
    // если какая-либо библиотека не имеет default import
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react'
    // можно писать такой
    // import React from 'react';
    "allowSyntheticDefaultImports": true,

    //While you can use TypeScript to produce JavaScript code from TypeScript code,
    //it’s also common to use other transpilers such as Babel to do this. However,
    //other transpilers only operate on a single file at a time, which means they can’t
    //apply code transforms that depend on understanding the full type system. This restriction
    //also applies to TypeScript’s ts.transpileModule API which is used by some build tools.
    //
    //These limitations can cause runtime problems with some TypeScript features like const enums
    //and namespaces. Setting the isolatedModules flag tells TypeScript to warn you if you write certain
    //code that can’t be correctly interpreted by a single-file transpilation process.
    //
    //It does not change the behavior of your code, or otherwise change the behavior
    //of TypeScript’s checking and emitting process.
    //
    //Some examples of code which does not work when isolatedModules is enabled.
    "isolatedModules": true
  },
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
  "exclude": [
    "./cypress/**",

    "./cypress.config.ts",
    //other exclusions that may help https://github.com/cypress-io/cypress/issues/22059#issuecomment-1428298264
    "node_modules",
    //"cypress",
    //"**/*.cy.tsx"
  ],
  "includes": [
    "./.eslintrc.js",
    "./src/app/types/global.d.ts",
    "./config/jest/setupTests.ts",
    "./src/**/*.ts",
    "./src/**/*.tsx"
  ] // проблема из-за линтера с импортом стилей
    // возникла из-за того что при отсутствии поля
    // includes в него автоматом попадают все файлы в том числе глобальной декларации
    // если же его добавить то в него попадут только те которые были вручную указаны
}
